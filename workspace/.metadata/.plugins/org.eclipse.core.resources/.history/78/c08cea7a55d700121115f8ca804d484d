import java.io.IOException;
import java.util.HashMap;
import java.util.Map.Entry;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import types.LongArrayWritable;
import types.Node;

public class Pagerank {
	
	public static final int REDUCE_TASKS = 25;
	
	public static class Map extends Mapper<LongWritable, Text, LongWritable, Node> {
		
		private HashMap<LongWritable, Float> massMessagesMap;
		
		@Override
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			Node node = new Node();
			LongWritable[] links;
			float partialPagerankMass = 0.0f;
			String[] lines = value.toString().split("\n");
			for (String line : lines) {
				String terms[] = line.split("\\s+");
				node.setNodeId(Long.parseLong(terms[0]));
				node.setPagerank(Float.parseFloat(terms[1]));
				links = new LongWritable[terms.length - 2];
				if(links.length > 0){
					for (int i = 2; i < terms.length; i++) {
						links[i - 2] = new LongWritable(Long.parseLong(terms[1]));
					}
					node.setAdjacencyList(links);
				}
				
				//Send structure of the node
				Node structure = new Node();
				structure.setNodeId(node.getNodeId());
				structure.setAdjacencyList(node.getAdjacencyList());
				context.write(structure.getNodeId(), structure);
				
				/** 
				 * Create the mass messages to be send to the neighbours
				 * Dangling nodes will not have a structere, since these
				 *  exist from a NodeId and Pagerank only
				 */
				if(node.hasStructure()) {
					partialPagerankMass = node.getPagerank().get() / links.length;
					for (LongWritable link : links) {
						massMessagesMap.put(link, massMessagesMap.containsKey(link) ? massMessagesMap.get(link) + partialPagerankMass : partialPagerankMass);
					}
				}
			}
		}
		
		@Override
		public void cleanup(Context context) throws IOException, InterruptedException {
			//Send partial pagerank mass from this node to its neighbours
			for (Entry<LongWritable, Float> entry : massMessagesMap.entrySet()) {
				Node mass = new Node();
				mass.setNodeId(entry.getKey());
				mass.setPagerank(entry.getValue());
				context.write(mass.getNodeId(), mass);
			}
		}
	}
	
	public static class Partition extends Partitioner<IntWritable, Text> {
		@Override
		public int getPartition(IntWritable nodeId, Text structure, int numPartitions) {
			if (numPartitions == 0) {
				return 0;
			}
			return nodeId.get() % numPartitions;
		}
	}
	
	public static class Reduce extends Reducer<LongWritable, Node, LongWritable, Text> {
		public void reduce(IntWritable key, Iterable<Node> values, Context context) throws IOException, InterruptedException {
				float pagerank = 0.0f;
				Node destinationNode = null;
				for(Node node : values){
					if(node.hasStructure()){ //graph structure found
						destinationNode = node;
					} else { //Increment current nodes pagerank with received pagerank from other pages
						pagerank += node.getPagerank().get();
					}
				}
				destinationNode.setPagerank(pagerank);
				context.write(destinationNode.getNodeId(), new Text(destinationNode.structure()));
		}
	}
	
	public static void printUsage(int argLength) {
		if (argLength < 2) {
			System.out.println("usage:\t <input path> <output path> <number of reduce tasks [default 25]>");
			System.exit(-1);
		}
	}
	
	public static Job createJob(String[] args, Configuration conf) throws IOException {
		printUsage(args.length);
		conf.set("wiki.language", "en");
		
		Job job = new Job(conf, "Pagerank");
		job.setJarByClass(Pagerank.class);
		FileInputFormat.setInputPaths(job, new Path(args[0])); //Input settings
		job.setInputFormatClass(TextInputFormat.class);
		FileOutputFormat.setOutputPath(job, new Path(args[1])); //Ouput settings
		job.setOutputFormatClass(TextOutputFormat.class);
		job.setOutputKeyClass(LongWritable.class);
		job.setOutputValueClass(Node.class);
		job.setMapperClass(Map.class); //Class settings
		job.setReducerClass(Reduce.class);
		job.setPartitionerClass(Partition.class);
		
		if (args.length > 2) {
			job.setNumReduceTasks(Integer.parseInt(args[2]));
		}
		if (args.length == 2) {
			job.setNumReduceTasks(REDUCE_TASKS);
		}
		
		return job;
	}
	
	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = createJob(args, conf);
		
		long startTime = System.currentTimeMillis();
		if (job.waitForCompletion(true)) {
			System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");
		}
	}
}
