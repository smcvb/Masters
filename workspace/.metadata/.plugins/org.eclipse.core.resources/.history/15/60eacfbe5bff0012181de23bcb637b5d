import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import KMeans.Map;
import KMeans.Reduce;

import types.Cluster;
import types.LongArrayWritable;
import types.Point;
import cloud9.WikipediaPage;
import cloud9.WikipediaPageInputFormat;

public class FindWikipediapage extends Configured implements Tool {
	
	public static class Map extends Mapper<LongWritable, WikipediaPage, Text, LongArrayWritable> {
		
		private HashMap<String, Long> title_docidMap = null;
		
		@Override
		public void setup(Context context) {
			try {
				Path[] paths = DistributedCache.getLocalCacheFiles(context.getConfiguration());
				if (paths != null && paths.length > 0)
					loadTitleDocidMapping(context, paths[0]);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		private void loadTitleDocidMapping(Context context, Path path) {
			BufferedReader br = null;
			long counter = 0;
			
			try {
				br = new BufferedReader(new FileReader(path.toString()));
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
				System.out.println("read from distributed cache: file not found!");
			}
			
			try {
				String line = "";
				title_docidMap = new HashMap<String, Long>(INITIAL_CAPACITY);
				while ((line = br.readLine()) != null) {
					String[] arr = line.split("\t");
					if (arr.length == 2) {
						counter++;
						context.setStatus("Progressing:" + counter);
						context.progress();
						title_docidMap.put(arr[0], Long.parseLong(arr[1]));
					}
				}
			} catch (IOException e1) {
				e1.printStackTrace();
				System.out.println("read from distributed cache: read length and instances");
			}
		}
		
		@Override
		public void map(LongWritable key, WikipediaPage value, Context context) throws IOException, InterruptedException {
			if (title_docidMap == null || value.isEmpty())
				return;
			Text docid = new Text(value.getDocid() + " 1");//'1' is the initial pagerank
			List<String> allLinksList = value.extractLinkDestinations();
			Iterator<String> linkIterator = allLinksList.iterator();
			ArrayList<LongWritable> linksList = new ArrayList<LongWritable>();
			
			while (linkIterator.hasNext()) {
				String link = linkIterator.next().toLowerCase();//Should be lowercase to make sure a correct comparison is made | HashMap contains lowercase keys
				if (title_docidMap.containsKey(link)) {
					LongWritable linkDocid = new LongWritable(title_docidMap.get(link));
					if (!linksList.contains(linkDocid))
						linksList.add(linkDocid);
				}
			}
			
			LongWritable[] linksArray = new LongWritable[linksList.size()];
			linksList.toArray(linksArray);
			LongArrayWritable links = new LongArrayWritable(LongWritable.class);
			links.set(linksArray);
			context.write(docid, links);
		}
	}
	
	public void phase1(Configuration conf, String inputString, String baseOutputString, int kmeans, int iteration) throws IOException, InterruptedException, ClassNotFoundException {
		String outputString = baseOutputString + "/iter" + (iteration + 1);
		conf.set("outlierlessMeans", outputString + "means/phase1"); // the path where to store the cluster means found
		conf.set("means", baseOutputString + "/iter" + iteration + "means/phase2"); // the path where to store the cluster means found
		
		Job phase1 = new Job(conf, "KMeans - Iteration " + (iteration + 1) + ", Phase 1"); // Main settings
		phase1.setJarByClass(KMeans.class);
		FileInputFormat.setInputPaths(phase1, new Path(inputString)); // Input settings
		phase1.setInputFormatClass(TextInputFormat.class);
		FileOutputFormat.setOutputPath(phase1, new Path(outputString)); // Output settings
		phase1.setOutputFormatClass(TextOutputFormat.class);
		phase1.setOutputKeyClass(IntWritable.class);
		phase1.setOutputValueClass(Point.class);
		phase1.setMapperClass(Map.class); // Class settings
		phase1.setReducerClass(Reduce.class);
		phase1.setNumReduceTasks(kmeans);
		
		long startTime = System.currentTimeMillis();
		if (phase1.waitForCompletion(true)) {
			System.out.println("\n\nIteration " + (iteration + 1) + ", Phase 1 Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");
		}
	}
	
	/**
	 * Iterate the main map/reduce job of:
	 *  1. Calculating distances between cluster centroids and the points
	 *  2. Recalculating the new cluster centroids
	 * If it is the first iteration, start by setting a flag in the 
	 * 	Configuration object 
	 * After a round was finished, check if the centroids converged (e.g. they equal the previous round)
	 * @param conf: Configuration object used for every Map/Reduce job initiated 
	 * @param inputString: the input path as a String
	 * @param baseOutputString: the base path as a String to put all the output in
	 * @param kmeans: the number of clusters to create as an Integer
	 * @param iterations: the number of iterations to run the algorithm as an Integer
	 * @throws Exception from the phase1() method
	 */
	private void iterate(Configuration conf, String inputString, String baseOutputString, int kmeans, int iterations) throws Exception {
		boolean converged = false;KMeans
		Cluster[] previousClusters = new Cluster[0], currentClusters = new Cluster[kmeans];
		
		System.out.printf("Matrix Input Path: %s Base Output Path: %s Iterations: %d\n", inputString, baseOutputString, iterations);
		for (int i = 0; i < iterations; i++) {
			// Check whether first iteration; of concern for initialization process
			if (i == 0) {
				conf.setBoolean("FirstIteration", true);
			}
			else {
				conf.setBoolean("FirstIteration", false);
			}
			
			// Start main algorithm
			System.out.printf("Phase 1, Iteration %d will start\n\n;", i + 1);
			phase1(conf, inputString, baseOutputString, kmeans, i); // Main k-means algorithm
			System.out.printf("\n\nPhase 1, Iteration %d complete | Phase 2, Iteration %d will start\n\n", i + 1, i + 1);
			currentClusters = phase2(conf, baseOutputString, kmeans, i); // Find the outliers for possible empty clusters
			System.out.printf("\n\nPhase 2, Iteration %d complete\n", i + 1);
			
			// Check for convergence of the algorithm
			if (checkConvergence(previousClusters, currentClusters)) {
				System.out.printf("Clusters Converged in Iteration %d\n\n", i + 1);
				for (int k = 0; k < currentClusters.length; k++) {
					System.out.printf("Cluster %d:\t%s\n", k, currentClusters[k].toString());
				}
				converged = true; // set to unset the final 'we-did-not-converge' print 
				break;
			}
			else {
				previousClusters = currentClusters;
			}
		}
		
		if (!converged) {
			System.out.printf("Clusters did not converge, but reached the maximum number of iterations\n\n");
			for (int k = 0; k < currentClusters.length; k++) {
				System.out.printf("Cluster %d:\t%s\n", k, currentClusters[k].toString());
			}
		}
	}
	
	/**
	 * Prints out the usages of this program in case the user
	 *  gave incorrect input
	 * @param numArgs: number of arguments in the String array object
	 */
	private int printUsage() {
		System.out.println("usage:\t <input path> <output path> <k mean points> <number of iterations> <[OPTIONAL] add 'combine' to use inmapper combiner>");
		ToolRunner.printGenericCommandUsage(System.out);
		return -1;
	}
	
	/**
	 * Runs the main program
	 * 
	 * @param args: String array of arguments given at start 
	 * @return -1 in case of error | 0 in case of success
	 * @throws Exception from the iterate() method
	 */
	@Override
	public int run(String[] args) throws Exception {
		int iterations = 0, kmeans = 0;
		String inputString = "", outputString = "";
		Configuration conf = new Configuration(getConf());
		
		// Set arguments
		if (args.length < 4) {
			System.err.println("Error: too few parameters given");
			return printUsage();
		}
		inputString = args[0];
		outputString = args[1];
		try {
			kmeans = Integer.parseInt(args[2]);
			conf.setInt("kmeans", kmeans);
			iterations = Integer.parseInt(args[3]);
		} catch (NumberFormatException e) {
			System.err.println("Error: expected Integers instead of " + args[2] + " (arg 2) and " + args[3] + " (arg 3)");
			return printUsage();
		}
		if (args.length > 4 && args[4].equals("combine")) {
			conf.setBoolean("combine", true);
		}
		else {
			conf.setBoolean("combine", false);
		}
		
		// Create and start iterations
		iterate(conf, inputString, outputString, kmeans, iterations);
		return 0;
	}
	
	public static void main(String[] args) throws Exception {
		int result = ToolRunner.run(new Configuration(), new FindWikipediapage(), args);
		System.exit(result);
	}
}
