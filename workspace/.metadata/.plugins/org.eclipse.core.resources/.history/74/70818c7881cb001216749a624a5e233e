package nl.vu.cs.cn;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.nio.ByteBuffer;

/**
 * @author Steven van Beelen, 1821806
 *
 * This class serves as the TCP header part of
 * 	a TCP segment.
 * Thus, it holds al the information a TCP Header should have
 * 	following from the known specification.
 */
public class TcpHeader {
	
	public short src_port;
	public short dest_port;
	public int seq_nr;
	public int ack_nr;
	public byte data_offset;
	public byte flags;
	public short window_size;
	public short checksum;
	public short urg_pointer;
	
	/**
	 * Construct a TCP Header
	 * 
	 * @param src_port: The source port number of this packet
	 * @param dest_port: The destination port number of this packet
	 * @param seq_nr: The sequence number of this packet
	 * @param ack_nr: The acknowledgement number of this packet
	 * @param data_offset: The data offset of were the data begins in this packet
	 * @param flags: The flags set for this packet
	 * @param window_size: The window_size for this packet (not used)
	 * @param checksum: The checksum computed for this packet
	 * @param urg_pointer: The pointer for the urgent data of this packet (not used)
	 */
	public TcpHeader(short src_port, short dest_port, int seq_nr, int ack_nr, byte data_offset, byte flags,
			short window_size, short checksum, short urg_pointer) {
		this.src_port = src_port;
		this.dest_port = dest_port;
		this.seq_nr = seq_nr;
		this.ack_nr = ack_nr;
		this.data_offset = data_offset;
		this.flags = flags;
		this.window_size = window_size;
		this.checksum = checksum;
		this.urg_pointer = urg_pointer;
	}
	
	/**
	 * Default TCP Header constructor
	 */
	public TcpHeader() {
		this((short) 0, (short) 0, 0, 0, (byte) 0, (byte) 0, (short) 0, (short) 0, (short) 0);
	}
	
	/**
	 * The length of a TCP Header consists of:
	 * 	Five Short values: src_port, dest_port, window_size, checksum and urg_pointer
	 * 	Two Integer values: seq_nr and ack_nr
	 * 	TWo Byte values: data_offset and flags
	 * @return the number of bytes as an integer of this tcp header
	 */
	public int length() {
		return (Short.SIZE * 5 + Integer.SIZE * 2 + Byte.SIZE * 2) / 8;
	}
	
	/**
	 * @return returns a byte array from this tcpheader
	 */
	public byte[] getByteArray() throws java.io.IOException {
		ByteBuffer bb = ByteBuffer.allocate(20);
		bb.putShort(src_port);
		bb.putShort(dest_port);
		bb.putInt(seq_nr);
		bb.putInt(ack_nr);
		bb.put(data_offset);
		bb.put(flags);
		bb.putShort(window_size);
		bb.putShort(checksum);
		bb.putShort(urg_pointer);
		bb.rewind();
		return bb.array();
		/*ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
		ObjectOutputStream objectStream = new ObjectOutputStream(byteStream);
		
		objectStream.writeShort(src_port);
		objectStream.writeShort(dest_port);
		objectStream.writeInt(seq_nr);
		objectStream.writeInt(ack_nr);
		objectStream.writeByte(data_offset);
		objectStream.writeByte(flags);
		objectStream.writeShort(window_size);
		objectStream.writeShort(checksum);
		objectStream.writeShort(urg_pointer);
		objectStream.flush();
		objectStream.close();
		*/
		/*byteStream.close();*/ /* no effect */
		/*
		byte[] bla = byteStream.toByteArray();
		*/
		
		
		//System.out.printf("BYTES:\n"+bla+"\n");
		
		
		//return bla;
	}
}
