import org.apache.hadoop.io.FloatWritable;
import org.apache.hama.graph.AbstractAggregator;
import org.apache.hama.graph.Vertex;

public class FloatAverageDifferenceAggregator extends AbstractAggregator<FloatWritable, Vertex<?, ?, FloatWritable>>{
		
	float accumulatedDifferenceCombo = 0.0f;
	float accumulatedDifferenceRegular = 0.0f;
	
	@Override
	public void aggregate(Vertex<?, ?, FloatWritable> vertex, FloatWritable oldValue, FloatWritable newValue){
		if(vertex != null){
			if(oldValue != null){
				//System.out.printf("combo Aggregate called\n");
				float difference = Math.abs(oldValue.get() - newValue.get());
				//System.out.printf("Oldvalue: %f Newvalue: %f\n Absolute Differen: %f\n", oldValue.get(), newValue.get(), difference);
				//System.out.printf("Previous accumulatedDifference: %f\n", accumulatedDifference);
				accumulatedDifferenceCombo += difference;
				//System.out.printf("New accumulatedDifference: %f\n", accumulatedDifference);
			}
		}
	}
	
	@Override
	public void aggregate(Vertex<?, ?, FloatWritable> vertex, FloatWritable value){
		if(vertex != null){
			//System.out.printf("regular Aggregate called\n");
			//System.out.printf("blablabla!\n");
			accumulatedDifferenceRegular += value.get();
		} else {
			//System.out.printf("regular Aggregate NULL\n");
		}
	}
	
	@Override
	public FloatWritable finalizeAggregation(){
		System.out.printf("accumulatedDifferenceCombo: %f accumulatedDifferenceRegular: %f\n", accumulatedDifferenceCombo, accumulatedDifferenceRegular);
		float average = accumulatedDifferenceCombo / this.getTimesAggregated().get();
		return new FloatWritable(average);
	}
	
	@Override
	public FloatWritable getValue(){
		return new FloatWritable(accumulatedDifferenceCombo);
	}
}