import java.io.IOException;
import java.util.HashMap;
import java.util.Map.Entry;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Counter;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import types.Node;

public class Pagerank{
	
	public static enum PagerankCounters {
		NODES, DANGLING_NODES, DANGLING_NODES_MASS
	}
	
	public static final float ALPHA = 0.25f;
	
	public static class Map extends Mapper<LongWritable, Text, LongWritable, Node> {
		
		private HashMap<LongWritable, Float> massMessagesMap;
		
		@Override
		public void setup(Context context) {
			massMessagesMap = new HashMap<LongWritable, Float>();
		}
		
		@Override
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			Node node = new Node();
			LongWritable[] links;
			float partialPagerankMass = 0.0f;
			String[] lines = value.toString().split("\n");
			for (String line : lines) {
				Counter c = context.getCounter(PagerankCounters.NODES);
				c.increment(1);
				System.out.printf("LINE: %s\n", line);//TODO 
				String terms[] = line.split("\\s+");
				node.setNodeId(Long.parseLong(terms[0]));
				node.setPagerank(Float.parseFloat(terms[1]));
				links = new LongWritable[terms.length - 2];
				if (links.length > 0) {
					for (int i = 2; i < terms.length; i++) {
						links[i - 2] = new LongWritable(Long.parseLong(terms[i]));
					}
					node.setAdjacencyList(links);
				}
				else {
					Counter d = context.getCounter(PagerankCounters.DANGLING_NODES);
					d.increment(1);
				}
				System.out.printf("FILLED NODE: %s\n", node.toString());//TODO 
				
				//Send structure of the node
				Node structure = new Node();
				structure.setNodeId(node.getNodeId());
				structure.setAdjacencyList(node.getAdjacencyList());
				context.write(structure.getNodeId(), structure);
				System.out.printf("FILLED STRUCTURE: %s\n", node.toString());//TODO 
				
				/** 
				 * Create the mass messages to be send to the neighbours
				 * Dangling nodes will not have a structere, since these
				 *  exist from a NodeId and Pagerank only
				 */
				System.out.printf("NODEID: %s PAGERANK: %s ", node.getNodeId(), node.getPagerank());//TODO
				if (node.hasStructure()) {
					partialPagerankMass = node.getPagerank().get() / links.length;
					System.out.printf("PARTIAL_PAGERANK: %f LINKS: ", partialPagerankMass);//TODO 
					for (LongWritable link : links) {
						System.out.printf("%d ", link.get());//TODO 
						massMessagesMap.put(link, massMessagesMap.containsKey(link) ? massMessagesMap.get(link) + partialPagerankMass : partialPagerankMass);
					}
				}
				System.out.printf("\n");//TODO 
			}
		}
		
		@Override
		public void cleanup(Context context) throws IOException, InterruptedException {
			//Send partial pagerank mass from this node to its neighbours
			for (Entry<LongWritable, Float> entry : massMessagesMap.entrySet()) {
				Node mass = new Node();
				mass.setNodeId(entry.getKey());
				mass.setPagerank(entry.getValue());
				context.write(mass.getNodeId(), mass);
			}
		}
	}
	
	public static class Partition extends Partitioner<LongWritable, Node> {
		@Override
		public int getPartition(LongWritable nodeId, Node node, int numPartitions) {
			if (numPartitions == 0) {
				return 0;
			}
			return (int) (nodeId.get() % numPartitions);
		}
	}
	
	public static class Reduce extends Reducer<LongWritable, Node, LongWritable, Text> {
		@Override
		public void reduce(LongWritable key, Iterable<Node> values, Context context) throws IOException, InterruptedException {
			float pagerank = 0.0f;
			Node destinationNode = new Node();
			destinationNode.setNodeId(key);
			for (Node node : values) {
				if (node.hasStructure()) { //graph structure found
					destinationNode = node;
				}
				else { //Increment current nodes pagerank with received pagerank from other pages
					pagerank += node.getPagerank().get();
				}
			}
			destinationNode.setPagerank(pagerank);
			context.write(destinationNode.getNodeId(), new Text(destinationNode.structure()));
		}
	}
	
	public static class MassDistributionMap extends Mapper<LongWritable, Text, LongWritable, Text> {
		
		private long numNodes;
		private float missingMassPart;
		
		@Override
		public void setup(Context context) {
			Configuration conf = context.getConfiguration();
			numNodes = conf.getInt("numNodes", 0);
			;
			context.getConfiguration().get("missingMass");
			float missingMass = conf.getFloat("missingMass", 0.0f);
			missingMassPart = missingMass / numNodes;
		}
		
		@Override
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			Node node = new Node();
			LongWritable[] links;
			float p = 0.0f;
			String[] lines = value.toString().split("\n");
			for (String line : lines) {
				Counter c = context.getCounter(PagerankCounters.NODES);
				c.increment(1);
				
				String terms[] = line.split("\\s+");
				node.setNodeId(Long.parseLong(terms[0]));
				p = Float.parseFloat(terms[1]);
				
				links = new LongWritable[terms.length - 2];
				if (links.length > 0) {
					for (int i = 2; i < terms.length; i++) {
						links[i - 2] = new LongWritable(Long.parseLong(terms[i]));
					}
					node.setAdjacencyList(links);
				}
				else {
					Counter d = context.getCounter(PagerankCounters.DANGLING_NODES);
					d.increment(1);
				}
				
				float jump = ALPHA / numNodes;
				float link = (1 - ALPHA) * (p + missingMassPart);
				p = jump + link;
				node.setPagerank(p);
				context.write(node.getNodeId(), new Text(node.structure()));
			}
		}
	}
	
	public void phase2(Configuration conf, String basePath, float missingMass, int numNodes, int iteration) throws IOException, InterruptedException, ClassNotFoundException {
		String in = basePath + "/iter" + (iteration + 1) + "out";
		String out = basePath + "/iter" + (iteration + 1);
		
		Job phase2 = new Job(conf, "Pagerank - Iteration " + iteration + " - Phase 2");
		phase2.setJarByClass(Pagerank.class);
		FileInputFormat.setInputPaths(phase2, new Path(in)); //Input settings
		phase2.setInputFormatClass(TextInputFormat.class);
		FileOutputFormat.setOutputPath(phase2, new Path(out + "/phaseTwo")); //Ouput settings
		phase2.setOutputFormatClass(TextOutputFormat.class);
		phase2.setOutputKeyClass(LongWritable.class);
		phase2.setOutputValueClass(Node.class);
		phase2.setMapperClass(MassDistributionMap.class); //Class settings
		phase2.setNumReduceTasks(0);
		
		long startTime = System.currentTimeMillis();
		if (phase2.waitForCompletion(true)) {
			System.out.println("Phase 2, Iteration " + iteration + " Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");
		}
	}
	
	public float phase1(Configuration conf, String startPath, String basePath, int numNodes, int iteration) throws IOException, InterruptedException, ClassNotFoundException {
		String in = "";
		if (iteration == 0) {
			//If first iteration, use start path given
			in = startPath;
		} else {
			//Else, use previous basePath
			in = basePath + "/iter" + iteration;
		}
		String out = basePath + "/iter" + (iteration + 1) +  "out";
		//Used for the mass lost
		String outm = out + "-mass";
		conf.set("PageRankMassPath", outm);
		int numPartitions = 0;
		for (FileStatus s : FileSystem.get(conf).listStatus(new Path(startPath))) {
			if (s.getPath().getName().contains("part-")) {
				numPartitions++;
			}
		}
		
		Job phase1 = new Job(conf, "Pagerank - Iteration " + iteration + " - Phase 1");
		phase1.setJarByClass(Pagerank.class);
		FileInputFormat.setInputPaths(phase1, new Path(in)); //Input settings
		phase1.setInputFormatClass(TextInputFormat.class);
		FileOutputFormat.setOutputPath(phase1, new Path(out)); //Ouput settings
		phase1.setOutputFormatClass(TextOutputFormat.class);
		phase1.setOutputKeyClass(LongWritable.class);
		phase1.setOutputValueClass(Node.class);
		phase1.setMapperClass(Map.class); //Class settings
		phase1.setReducerClass(Reduce.class);
		phase1.setPartitionerClass(Partition.class);
		phase1.setNumReduceTasks(numPartitions);
		
		long startTime = System.currentTimeMillis();
		if (phase1.waitForCompletion(true)) {
			System.out.println("Phase 1, Iteration " + iteration + " Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");
		}
		
		float mass = 0.0f;
		FileSystem fs = FileSystem.get(conf);
		for (FileStatus f : fs.listStatus(new Path(outm))) {
			FSDataInputStream fin = fs.open(f.getPath());
			mass += fin.readFloat();
			fin.close();
		}
		
		return mass;
	}
	
	public void iterate(String[] args, Configuration conf) throws Exception {
		String startPath = args[0], basePath = args[1];
		int numNodes = Integer.parseInt(args[2]), iterations = Integer.parseInt(args[3]);
		float missingMass = 0.0f;
		
		conf.setInt("numNodes", numNodes);
		for (int i = 0; i < 1; i++) {
			missingMass = phase1(conf, startPath, basePath, numNodes, i);
			conf.setFloat("missingMass", missingMass);
			phase2(conf, basePath, missingMass, numNodes, i);
		}
	}
	
	public void printUsage(int argLength) {
		if (argLength < 4) {
			System.out.println("usage:\t <input path> <output path> <number of nodes> <number of iterations>");
			System.exit(-1);
		}
	}
	
	public void run(String[] args) {
		Configuration conf = new Configuration();
		printUsage(args.length);
		try {
			iterate(args, conf);
		} catch (Exception e) {
			e.printStackTrace(System.out);
		}
	}
	
	public static void main(String[] args) {
		new Pagerank().run(args);
	}
}
