package nl.vu.cs.cn;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import nl.vu.cs.cn.IP.IpAddress;

/**
 * @author Steven van Beelen, 1821806
 * @coauthor Gerben Rozie
 * 
 * This class serves as the PseudoHeader 
 *  used to compute the checksum of a TCP Segment.
 */
public class PseudoHeader {
	
	public IP.IpAddress src_ipaddr;
	public IP.IpAddress dest_ipaddr;
	public byte zero;
	public byte ptcl;
	public short tcp_length;
	
	/**
	 * Construct a Pseudo IP Header
	 * 
	 * @param src_ipaddr: The source IP address
	 * @param dest_ipaddr: The destination IP address
	 * @param zero: The zero padding used to fill the PseudoHeaders third row
	 * @param ptcl: The protocol number underlying this header (always 6 within this program)
	 * @param tcp_length: The length of the TCP segment which entails this Pseudo IP header
	 */
	public PseudoHeader(IpAddress src_ipaddr, IpAddress dest_ipaddr, byte zero, byte ptcl, short tcp_length) {
		this.src_ipaddr = src_ipaddr;
		this.dest_ipaddr = dest_ipaddr;
		this.zero = zero;
		this.ptcl = ptcl;
		this.tcp_length = tcp_length;
	}
	
	/**
	 * Default PseudoHeader constructor
	 */
	public PseudoHeader() {
		this(IP.IpAddress.getAddress(0), IP.IpAddress.getAddress(0), (byte) 0, (byte) 0, (short) 0);
	}
	
	/**
	 * Creates a byte array of all the contents of 
	 *  this object. Used for the checksum computing
	 * The addresses contained in this object should be
	 *  read in in little endian, whilst the rest should 
	 *  be read in in big endian. Hence, two ByteBuffers
	 *  are used.
	 *  
	 * @return returns a byte array from this pseudoheader
	 */
	public byte[] getByteArray() throws java.io.IOException {
		ByteBuffer bb = ByteBuffer.allocate(12), bb2 = ByteBuffer.allocate(4);
		
		bb2.order(ByteOrder.LITTLE_ENDIAN);
		bb2.putInt(src_ipaddr.getAddress());
		bb2.rewind();
		bb.put(bb2.array());
		bb2.rewind();
		bb2.putInt(dest_ipaddr.getAddress());
		bb2.rewind();
		bb.put(bb2.array());
		bb.put(zero);
		bb.put(ptcl);
		bb.putShort(tcp_length);
		bb.rewind();
		
		return bb.array();
	}
}
