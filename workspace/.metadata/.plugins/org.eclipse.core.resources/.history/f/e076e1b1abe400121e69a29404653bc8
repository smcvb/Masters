package nl.vu.cs.cn.test;

import junit.framework.TestCase;
import nl.vu.cs.cn.PseudoHeader;
import nl.vu.cs.cn.TcpSegment;

/**
 * This test performs a check on the correctness of our checksums
 * Note that this test does not check whether the TCP header or PseudoHeader
 *  are actually used in the computation (since they are initialized at 0's)
 *  and this test only computes the checksums on 'random' data
 */
public class TcpChecksumCheck extends TestCase {
	public void testChecksumCheck() {
		TcpSegment s = new TcpSegment(); // init TCP segment data to 0's
		PseudoHeader ph = new PseudoHeader(); // create an empty PseudoHeader
		byte[] data = {
				//03 32  9C B0  4B 40  04 6D  DF
				3, 50, -100, -80, 75, 64, 4, 109, -33
		};
		s.data = data;
		// 0332 + 9CB0 + 4B40 + 046D + DF00 = 1CE8F -> CE90 -> 316F
		//                            summed up    wrap   complement
		assertEquals(s.computeChecksum(ph), (short) 0x316F);
		
		byte[] data2 = {
				-1, 35, -22, -45, -38, 98, -29, 43,
				2, -124, 95, 88, -62, -18, 125, 63,
				87, 58, -72, -30, -5, 107, -8, 4,
				115, -127, 8, 69, -121, 61, 68, -28,
				124, 52, -67, -61, -70, -96, -56, -87,
				-122, 106, -71, 15, 114, -2, 118, -95,
				-100, 17, 86, 85, 16, -86, 74, 41,
				-65, -110, -81, 55, -90, 19, -46, -112,
				25, 57, -53, 110, -25, -89, -13, 34,
				116, 44, -15, -80, 54, -76, -84, 117,
				97, -113, 12, 51, 94, -106, 99, -74,
				-118, -104, -117, 6, -31, -41, 24, 47,
				10, 30, 80, -42, -26, 13, -47, 39,
				-7, 101, 120, 93, -98, 89, -103, -60,
				32, 126, -114, 121, -102, 111, -73, -68,
				-108, -83, -116, -17, -69, -63, -52, -91,
				-120, -85, 77, -126, -78, -82, 37, 82,
				-11, -97, -35, -75, -12, 23, -55, 45,
				-3, -58, 42, -49, 75, -64, 84, 26,
				-128, -16, 50, -36, 21, 5, 67, -79,
				-44, -99, 36, -9, 14, -23, -93, -92,
				-50, -14, 64, -57, -24, 22, -107, 38,
				104, -32, 48, 72, -6, -20, 29, 90,
				-59, 33, -125, 7, 113, 0, 122, 105,
				1, 53, -43, 11, 83, -54, 109, 20,
				123, 92, 91, -94, -119, 127, -105, -101,
				-115, 31, 71, -123, 60, 9, 119, -33,
				-48, -19, 65, -88, 76, 3, 62, 27,
				100, 49, 46, -21, -39, -109, 18, -77,
				-4, 59, -10, -37, 73, 78, 112, 28,
				-51, 81, 108, 79, 96, -111, 102, 66,
				56, 70, 103, -40, -27, -34, -66, 40
		};
		s.data = data2;
		assertEquals(s.computeChecksum(ph), (short) 0x49B6);
		
		byte[] data3 = {
				52, -14, -108, 114, -111, -35, -93, -7,
				0, -69, -19, 37, -55, 66, 65, 95,
				-9, -114, 119, 71, 94, -54, 6, -105,
				49, 51, 61, -90, -40, -31, -109, -74,
				113, -41, -86, -122, 76, 118, -79, 64,
				125, 77, 81, -113, -49, -1, 90, -53,
				-116, 18, 73, -87, -99, 24, 63, 117,
				1, 35, -62, -119, 48, 28, -78, 19,
				21, -94, -13, 31, 45, 89, -15, -34,
				39, 62, -21, 75, 101, -80, 38, 92,
				-100, -104, 59, -77, 79, 110, -56, -110,
				-123, -92, -95, -101, 122, 91, 56, -59,
				20, -121, -61, 8, 3, 7, 58, 41,
				123, 34, 17, -88, 2, 40, 14, -6,
				23, -126, -22, -18, -120, 9, 26, -65,
				-8, 11, 88, 27, 99, 121, -11, 57,
				-43, 74, -5, -25, -24, -118, -73, -36,
				100, 80, 10, -76, -66, -29, 85, 124,
				120, 93, 96, 103, 50, 112, 13, 127,
				54, 109, -68, 32, -30, -60, -4, 98,
				4, -71, 80, -20, 105, 69, -50, -127,
				12, -12, -98, -16, -44, -39, -48, 87,
				-117, -112, -3, -89, -10, -26, -96, -124,
				102, -107, -32, 111, 108, -2, -67, -47,
				107, 53, -70, -45, 83, 55, -83, 60,
				67, 84, 116, -17, -27, -81, -46, 15,
				-38, 104, -52, 106, 29, 22, -75, -63,
				-64, 115, 43, -57, 126, 42, -82, 97,
				78, 33, 46, 25, -103, 82, 36, -106,
				16, -85, -33, 5, -37, -97, -128, -23,
				-125, 30, -58, -28, -51, -42, -102, 68,
				44, -84, 47, -72, 72, -91, 70, -5
		};
		s.data = data3;
		assertEquals(s.computeChecksum(ph), (short) 0xBCDA);
		
		byte[] data4 = {
				110, -30, -92, 43, -113, 26, 87, -24,
				96, -95, 114, 124, 41, 14, 23, 113,
				-33, 121, -112, 6, 107, -52, -15, -8,
				46, 62, -101, 122, -6, -49, 25, -50,
				31, -18, -79, 7, 4, 37, 17, 51,
				72, -54, 49, -45, -82, -100, -87, 30,
				-13, 75, -40, -78, -107, 19, -53, -41,
				-96, -55, -69, 125, -124, 50, -12, -43,
				81, -99, 116, -103, 61, 102, 39, 13,
				-76, 15, -126, -114, -84, -20, -20, 11,
				95, -19, -72, -68, 120, -60, 47, -81,
				-51, 70, -16, 100, -121, 94, 82, 64,
				-100, -7, -38, -118, -59, 58, -75, 63,
				10, 99, 35, -46, -48, 45, 24, 1,
				-115, -111, 28, -61, 40, 8, 77, 101,
				-93, 98, 123, -64, -105, -22, 27, -35,
				-70, 97, 118, -31, -21, 79, 80, -57,
				-110, 16, -10, -34, -127, -9, 91, -11,
				-63, 119, 76, 85, -32, -27, 88, 105,
				5, 126, 59, -65, 22, -117, -4, 114,
				108, -36, -74, 69, 71, 32, -123, -67,
				2, -14, 36, -90, -85, -2, -98, 60,
				-73, -47, -80, 54, -94, 117, -26, -5,
				78, 92, 67, -42, 100, 55, -37, -58,
				-83, -23, -1, -28, -86, 29, -29, 74,
				-77, -3, 73, 127, 65, -116, 106, 3,
				84, 57, 52, 12, -39, -88, 38, -56,
				68, -89, 112, -62, 21, -119, 83, 20,
				-91, -44, 34, -104, 18, 53, -120, 89,
				86, -71, 104, 103, 48, -17, 111, -106,
				-66, -109, 56, 66, 93, 0, -97, 9,
				-125, 42, -128, -102, 90, 33, 44, -122
		};
		s.data = data4;
		assertEquals(s.computeChecksum(ph), (short) 0xDE1E);
		
		byte[] data5 = {
				-80, -123, -68, 72, 57, -57, 79, -119,
				37, -103, -47, 78, 30, -74, 8, -82,
				99, -26, 44, -124, 38, 58, 34, -61,
				105, 12, -124, 63, 34, 79, -41, -45,
				84, 20, 28, 13, -37, -21, 23, 2,
				-123, -24, -49, 35, 32, 87, 81, -125,
				-66, 125, -121, -28, 55, -87, -88, 32,
				53, 45, 96, -41, -5, -73, -85, 81,
				-53, 71, -35, -89, 51, -12, 41, 57,
				-34, 121, 92, 126, -48, -82, -127, -113,
				-85, 9, -12, -29, 50, -99, 4, -25,
				75, -29, -65, -58, -101, -22, -105, -26,
				50, 118, -113, -27, 107, 56, -98, -55,
				-79, 122, 72, -125, -88, 73, -110, 85,
				82, -121, -72, -123, -91, 60, 109, -16,
				-96, -84, -73, 60, -105, -49, 36, 73,
				10, 51, 47, -79, -22, 77, -5, -99,
				-56, 68, -96, 113, -114, 51, 70, 96,
				59, -2, 101, -32, -69, 82, 81, 92,
				-2, -120, 24, 22, 88, -69, 96, -98,
				-18, 15, -48, -38, 93, -52, -9, -91,
				-112, -104, -106, -98, 75, -35, 0, -122,
				92, 101, -26, 24, 56, 56, -13, 55,
				-63, 13, 78, -103, -56, 46, 57, 56,
				61, -119, 19, 26, 86, -118, 63, 102,
				35, -42, 6, -19, 52, 6, 117, 16,
				-22, 92, -88, 35, -107, -100, -38, -42,
				-87, -88, 112, 115, -42, 41, -85, -109,
				50, 62, -82, -120, -56, -19, 111, 107,
				68, 117, 89, -9, -6, 78, 9, 101,
				-85, -79, -119, -64, -51, -29, 23, 120,
				-116, 7, 107, -30, -80, -106, 118, -30
		};
		s.data = data5;
		assertEquals(s.computeChecksum(ph), (short) 0x8ED3);
	}
}
