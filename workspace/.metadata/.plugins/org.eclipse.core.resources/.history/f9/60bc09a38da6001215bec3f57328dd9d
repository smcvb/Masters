import org.apache.hadoop.io.FloatWritable;
import org.apache.hama.graph.AbstractAggregator;
import org.apache.hama.graph.Vertex;

public class FloatAverageDifferenceAggregator extends AbstractAggregator<FloatWritable, Vertex<?, ?, FloatWritable>>{
		
	float accumulatedDifference = 0.0f;
	
	@Override
	public void aggregate(Vertex<?, ?, FloatWritable> vertex, FloatWritable oldValue, FloatWritable newValue){
		if(oldValue != null){
			float difference = Math.abs(oldValue.get() - newValue.get());
			//System.out.printf("Oldvalue: %f Newvalue: %f\n Absolute Differen: %f\n", oldValue.get(), newValue.get(), difference);
			//System.out.printf("Previous accumulatedDifference: %f\n", accumulatedDifference);
			accumulatedDifference += difference;
			//System.out.printf("New accumulatedDifference: %f\n", accumulatedDifference);
		}
	}
	
	@Override
	public void aggregate(Vertex<?, ?, FloatWritable> vertex, FloatWritable value){
		System.out.printf("regular Aggregate called\n");
		accumulatedDifference += value.get();
	}
	
	@Override
	public FloatWritable finalizeAggregation(){
		//System.out.printf("finalizer ONE called? value: %f\n", accumulatedDifference);
		float average = accumulatedDifference / this.getTimesAggregated().get();
		return new FloatWritable(average);
	}
	
	@Override
	public FloatWritable getValue(){
		return new FloatWritable(accumulatedDifference);
	}
}