import java.io.IOException;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.Map.Entry;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;

import org.apache.hama.bsp.BSP;
import org.apache.hama.bsp.BSPJob;
import org.apache.hama.bsp.BSPPeer;
import org.apache.hama.bsp.FileInputFormat;
import org.apache.hama.bsp.FileOutputFormat;
import org.apache.hama.bsp.TextInputFormat;
import org.apache.hama.bsp.TextOutputFormat;

/**
 * WordCount example
 * Implementation in Apache Hama
 *
 * @author stevenb
 * @version one
 * @date 11-04-2013
 */
public class WordCount {
	
	public static class Test extends BSP<LongWritable, Text, Text, IntWritable, Text>{

		private Text word = new Text();
		private IntWritable counter = new IntWritable();
		private HashMap<String, Integer> wordMap = new HashMap<String, Integer>();
		
		public void setup(BSPPeer<LongWritable, Text, Text, IntWritable, Text> peer) throws IOException { //initialize
			LongWritable key = new LongWritable();
			Text value = new Text();
			while(peer.readNext(key, value)){
				Integer i = new Integer(0);
				String line = value.toString();
				StringTokenizer tokenizer = new StringTokenizer(line);
				while(tokenizer.hasMoreTokens()){
					String w = tokenizer.nextToken().toLowerCase();
					if((i = wordMap.remove(w)) == null){
						wordMap.put(w, new Integer(1));
					} else {
						wordMap.put(w, (i.intValue() + 1));
					}
				}
			}
		}
		
		@Override
		public void bsp(BSPPeer<LongWritable, Text, Text, IntWritable, Text> peer) {
			
		}
		
		public void cleanup(BSPPeer<LongWritable, Text, Text, IntWritable, Text> peer) throws IOException { //close
			for(Entry<String, Integer> entry : wordMap.entrySet()){
				word.set(entry.getKey());
				counter.set(entry.getValue());
				peer.write(word, counter);
			}
		}
	}
	
	public static void main(String[] args) throws InterruptedException, IOException, ClassNotFoundException {
		BSPJob job = new BSPJob();
		job.setJarByClass(WordCount.class);
		job.setJobName("WordCount Example");
		job.setBspClass(Test.class);
		job.setInputFormat(TextInputFormat.class);
		job.setOutputFormat(TextOutputFormat.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		if(args.length == 3){
			if(args[0].matches("[0-9]")){ 
				job.setNumBspTask(Integer.parseInt(args[0]));
			} else {
				job.setNumBspTask(2);
			}
			FileInputFormat.setInputPaths(job, new Path(args[1]));
			FileOutputFormat.setOutputPath(job, new Path(args[2]));
		} else if(args.length < 3){
			System.out.println("To few arguments given:\n");
			System.out.println("How to\n" +
					"*\tNumber of BSP tasks\n" +
					"*\tInput file\n" +
					"*\tOutput file");
			System.exit(1);
		} else {	//Case when more than 4 arguments given: incorrect
			System.out.println("To many arguments given:\n");
			System.out.println("How to\n" +
					"*\tNumber of BSP tasks\n" +
					"*\tInput file\n" +
					"*\tOutput file");
			System.exit(1);
		}

		long startTime = System.currentTimeMillis();
		if (job.waitForCompletion(true))
			System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");
	}
}