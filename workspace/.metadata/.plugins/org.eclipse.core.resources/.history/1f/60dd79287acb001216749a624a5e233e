package nl.vu.cs.cn;

public class TCB {
	
	/**
	 * Class for the TCP Control Block, containing all the 
	 * relevant information concerning the connection
	 */
	
	public static final int BUF_SIZE = 7080;
	
	public IP.IpAddress 	src_ip_addr; 		// Source IP address
	public IP.IpAddress 	dest_ip_addr; 		// Destination IP address
	public short 			src_port; 			// Source port number
	public short 			dest_port; 			// Destination port number
	public int 				src_seq_num; 		// Current sequence number, known to destination
	public int 				src_expected_ack; 	// Acknowledgement expected by source
	public int 				dest_seq_num;		// Probable sequence number expected from source by destination
	public byte 			data[];		// Buffer with received packet
	public byte 			packet_data; 		// Data to be deliverd
	public int 				data_left; 			// Bytes left to be deliverd
	public ConnectionState 	state; 				// Current state of the connection
	
	public TCB(IP.IpAddress src_ip_addr, IP.IpAddress dest_ip_addr, short src_port, short dest_port, 
			int src_seq_num, int src_expected_ack, int dest_seq_num, byte data[], 
			byte packet_data, int data_left, ConnectionState state){
		this.src_ip_addr 		= src_ip_addr;
		this.dest_ip_addr 		= dest_ip_addr;
		this.src_port 			= src_port;
		this.dest_port 			= dest_port;
		this.src_seq_num 		= src_seq_num;
		this.src_expected_ack 	= src_expected_ack;
		this.dest_seq_num 		= dest_seq_num;
		this.data 				= data;
		this.packet_data 		= packet_data;
		this.data_left 			= data_left;
		this.state 				= state;
	}
	
	public TCB(IP.IpAddress ip){
		this(ip, IP.IpAddress.getAddress(0), (short)0, (short)0, 0, 0, 0, new byte[0], (byte)0, 0, ConnectionState.CLOSED);
	}
	
	public TCB(){
		this(IP.IpAddress.getAddress(0), IP.IpAddress.getAddress(0), (short)0, (short)0, 0, 0, 0, new byte[0], (byte)0, 0, ConnectionState.CLOSED);
	}
	
	//Misschien overbodige get methodes, dus variables public houden, overlegen
	/** @return the source IP address as IpAddress */
	public IP.IpAddress getSrcIPAddr(){
		return src_ip_addr;
	}
	
	/** @return the destination IP address as IpAddress */
	public IP.IpAddress getDestIPAddr(){
		return dest_ip_addr;
	}
	
	/** @return the source port as an integer */
	public short getSrcPort(){
		return src_port;
	}
	
	/** @return the destination port as an integer */
	public short getDestPort(){
		return dest_port;
	}
	
	/** @return the source sequence number as an integer */
	public int getSrcSeqNum(){
		return src_seq_num;
	}
	
	/** @return the expected acknowledgement number of the source as an integer */
	public int getSrcExpectedAck(){
		return src_expected_ack;
	}
	
	/** @return the destination sequence number as an integer */
	public int getDestSeqNum(){
		return dest_seq_num;
	}
	
	/** @return the data buffer as a byte array */
	public byte[] getData(){
		return data;
	}
	
	/** @return the packet data left to deliver as a byte */
	public byte getPacketData(){
		return packet_data;
	}
	
	/** @return the amount of data left as an integer */
	public int getDataLeft(){
		return data_left;
	}
	
	/** @return the current state of the connection */
	public ConnectionState getState(){
		return state;
	}
}