package nl.vu.cs.cn.test;

import java.io.IOException;

import junit.framework.TestCase;
import nl.vu.cs.cn.IP.IpAddress;
import nl.vu.cs.cn.TCPImplementation;
import nl.vu.cs.cn.TCPImplementation.SocketImplementation;

/**
 * This test performs a monkey check on the improper use of write (higher maxlen than the buffer allows)
 * - the server accepts a connection
 * - the client connects
 * - the client writes data
 * - the client closes the connection
 */
public class TcpBadWrite extends TestCase {
	public static final int ADDR = 108;
	public static final int PORT = 1234;
	public static final int MSG_SIZE = 512;
	private TCPImplementation tcp1, tcp2;
	
	/**
	 * This class represents the accepter thread.
	 */
	private class Server implements Runnable {
		
		private SocketImplementation sock;
		private IpAddress ip_addr;
		
		public Server(TCPImplementation tcp) {
			sock = tcp.socket(PORT);
			assertNotNull(sock);
			assertEquals(sock.port, PORT);
			ip_addr = tcp.ip.getLocalAddress();
			assertNotNull(ip_addr);
		}
		
		@Override
		public void run() {
			sock.accept();
			byte[] buf = new byte[7968];
			int bytesRead = sock.read(buf, 0, buf.length);
			assertEquals(bytesRead, buf.length);
			for (int i = 0; i < buf.length; i++) {
				assertEquals((byte) i, buf[i]);
			}
			boolean result = sock.close();
			assertTrue(result);
		}
		
	}
	
	/**
	 * This class represents the connecter thread.
	 */
	private class Client implements Runnable {
		
		private SocketImplementation sock;
		private IpAddress ip_addr;
		private IpAddress dst_addr;
		
		public Client(TCPImplementation tcp, IpAddress dst_addr) {
			sock = tcp.socket(PORT - 1);
			assertNotNull(sock);
			assertEquals(sock.port, PORT - 1);
			ip_addr = tcp.ip.getLocalAddress();
			assertNotNull(ip_addr);
			this.dst_addr = dst_addr;
		}
		
		@Override
		public void run() {
			boolean result;
			do {
				result = sock.connect(dst_addr, PORT);
			} while (!result);
			byte[] buf = new byte[7968];
			for (int i = 0; i < buf.length; i++) {
				buf[i] = (byte) i;
			}
			try {
				sock.write(buf, 0, buf.length + 1);
				fail();
			} catch (ArrayIndexOutOfBoundsException e) {
				// do nothing, this is intended
			}
			result = sock.close();
			assertTrue(result);
		}
	}
	
	public TcpBadWrite(String method) {
		super(method);
	}
	
	/**
	 * This method will be called by the testSuite to start the test
	 */
	public void testBadWrite() {
		System.setProperty("PACKET_LOSS", "0");
		System.setProperty("PACKET_CORRUPTION", "0");
		try {
			tcp1 = new TCPImplementation(ADDR);
			tcp2 = new TCPImplementation(ADDR + 1);
		} catch (IOException e) {
			fail();
		}
		Server s = new Server(tcp1);
		Client c = new Client(tcp2, tcp1.ip.getLocalAddress());
		assertNotNull(s);
		assertNotNull(c);
		Thread server = new Thread(s);
		Thread client = new Thread(c);
		server.start();
		client.start();
		// use a timeout to avoid infinite loops of code and fail the test if such timeout is reached
		try {
			client.join(15000);
			server.join(1);
			System.out.flush();
		} catch (InterruptedException e) {
			fail();
		}
	}
}
