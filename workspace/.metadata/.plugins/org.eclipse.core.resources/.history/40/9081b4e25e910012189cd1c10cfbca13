import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.TextInputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;


public class WordCount {

	/**
	 * class Mapper
	method Map(docid a, doc d)
	for all term t ∈ doc d do
	Emit(term t, count 1)
	 * @author stevenb
	 *
	 */
	public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {
		public void map(LongWritable key, Text value, OutputCollector<Text, Text> output, Reporter reporter) throws IOException { }
	}
		
	/**
	 * class Reducer
	 * method Reduce(term t, counts [c1 , c2 , . . .])
	 * sum ← 0
	 * for all count c ∈ counts [c1 , c2 , . . .] do
	 * sum ← sum + c
	 * Emit(term t, count sum)
	 * 
	 * @param key
	 * @param value
	 * @param output
	 * @param reporter
	 * @throws IOException
	 */
	public static class Reduce extends MapReduceBase implements Reducer<Text, Text, Text, Text> {
		public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException { }
	}
	
	public static void main(String[] args) throws Exception {
		JobConf job = new JobConf(UsingMapReduce.class);
		job.setJobName("usingMapReduce");
		
		job.setInputFormat(TextInputFormat.class);
		job.setOutputFormat(TextOutputFormat.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		
		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);
		
		if(args.length == 3){
			job.setNumReduceTasks(Integer.parseInt(args[0]));
			FileInputFormat.setInputPaths(job, new Path(args[1]));
			FileOutputFormat.setOutputPath(job, new Path(args[2]));
		} else if(args.length < 3){
			System.out.println("To few arguments given: the number of reduce tasks, one input- and one outputpath should be inserted\n");
			System.exit(1);
		} else {	//Case when more than 2 arguments given: incorrect
			System.out.println("To many arguments given: only the number of reduce tasks, one input- and one outputpath should be inserted\n");
			System.exit(1);
		}
		
		JobClient.runJob(job);
	}
}
